# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type VehicleEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  model: String!

  """patente"""
  carPlate: String!

  """color"""
  color: String!

  """car type"""
  carType: Int
  owner: UserEntity!
  bookings: [BookingEntity!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CouponEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  code: String!
  createdBy: String!
  type: Int!
  behavior: Int!
  assignedUsers: [UserCouponEntity!]
  active: Boolean!
  dateStart: DateTime
  dateEnd: DateTime
  useTimes: Int
  global: Boolean!
  value: Int!
}

type UserCouponEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  user: UserEntity!
  coupon: CouponEntity!
  quantityRemaining: Int!
  valid: Boolean!
}

type UserEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!

  """photo of the user"""
  profilePhoto: String

  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """hashed password of the user"""
  password: String!

  """validated email"""
  validatedEmail: Boolean!

  """validated phone"""
  validatedPhone: Boolean!
  validatedAccount: Boolean!

  """type of the user"""
  userType: UserTypesEnum!

  """validated phone"""
  restrictedParkings: [ParkingEntity!]
  vehicleList: [VehicleEntity!]
  bookings: [BookingEntity!]
  wallet: Int!
  licenseDriver: String
  dniPhoto: String

  """coupons available for the user"""
  userCoupons: [UserCouponEntity!]
  paykuClientId: String
  paykuSubId: String
  supplier: String!
}

enum UserTypesEnum {
  USER
  MANAGER
  ROOT_MANAGER
  ADMIN
  ROOT
}

type HoldingEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!

  """photo of the user"""
  profilePhoto: String

  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """creation date of the user"""
  clientList: [ClientEntity!]!
}

type TagsEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  name: String!
  color: String!
  icon: String!
  buildings: [BuildingEntity!]!
}

type ParkingGuardEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!

  """photo of the user"""
  profilePhoto: String

  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """hashed password of the user"""
  password: String!

  """validated email"""
  validatedEmail: Boolean!

  """validated phone"""
  validatedPhone: Boolean!
  validatedAccount: Boolean!

  """type of the user"""
  userType: Int!
  guardBuildings: [BuildingEntity!]!
}

type BuildingEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  active: Boolean

  """name of the building"""
  name: String!

  """address of the building"""
  address: String!

  """phone number of the building"""
  phoneNumber: String!

  """photos of the building"""
  photo: String
  client: ClientEntity!

  """parkings of the building"""
  parkingList: [ParkingEntity!]!
  tags: [TagsEntity!]!
  location: Geometry!
  floors: String!
  description: String
  guardsAssigned: [ClientEntity!]
}

"""Geometry scalar type"""
scalar Geometry

type LiquidationEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  numberId: String!
  client: ClientEntity!
  bookings: [BookingEntity!]!
  priceToBeLiquidated: Float!
  liquidatedBy: String!
  liquidationType: Int!
  paid: Boolean!
  liquidationReceipt: String!
  approved: Boolean!
  approvedBy: String!
  liquidatedPdf: String!
}

type ClientEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!

  """photo of the user"""
  profilePhoto: String

  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """hashed password of the user"""
  password: String!

  """validated email"""
  validatedEmail: Boolean!

  """validated phone"""
  validatedPhone: Boolean!
  validatedAccount: Boolean!

  """type of the user"""
  userType: Int!
  parkingList: [ParkingEntity!]!
  buildings: [BuildingEntity!]!
  holding: HoldingEntity
  liquidations: [LiquidationEntity!]!
  preferedLiquidationPayRate: Int!
  bankType: Int
  bankAccountName: String!
  bankAccountType: Int!
  bankAccountNumber: String!
  bankAccountEmail: String!
  supplier: String!
}

type ScheduleEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!

  """day of the schedule"""
  day: Int!
  scheduleStart: DateTime!
  scheduleEnd: DateTime!
  parking: ParkingEntity!
}

type EventEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  active: Boolean!
  code: String!
  bannerImage: String
  descriptionOfBanner: String!
  name: String!
  organizerName: String!
  startAt: DateTime!
  endAt: DateTime!
  percentageParkingDiscount: Float!
  percentageOrganizedProfit: Float!
  parkings: [ParkingEntity!]
}

type ParkingEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  active: Boolean!
  reserved: Boolean!
  name: String!
  blocked: Boolean!
  address: String!
  floor: Int!
  section: String!
  code: String!
  type: Int!
  photo: String
  blockedUsers: [UserEntity!]!
  tax: String!
  pricePerMinute: String!
  priceMonthly: String!
  priceYearly: String!
  client: ClientEntity!
  schedule: [ScheduleEntity!]!
  building: BuildingEntity!
  bookings: [BookingEntity!]!
  phone: String
  contactEmail: String
  canBookAnticipated: Boolean
  percentageSurchargeForReservation: Float
  event: EventEntity
}

type BookingEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  numberId: String!
  bookingType: Int!
  bookingState: Int!
  parking: ParkingEntity!
  user: UserEntity!
  initialPrice: Float!
  dateStart: DateTime!
  dateEnd: DateTime!
  dateExtended: DateTime
  timeFinalized: DateTime
  finalPrice: Float
  paid: Boolean!
  liquidation: LiquidationEntity!
  vehicle: VehicleEntity
  anticipatedBooking: Boolean
  lastestNotifiedState: Boolean
}

type RequestEntity {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  fullName: String!
  type: Float!
  status: Float!
  phoneNumber: String!
  email: String!
  state: String!
  city: String!
  parkingType: Float!
  address: String!
  location: Geometry!
  quantity: Float!
  scheduleStart: DateTime!
  scheduleEnd: DateTime!
  floor: String!
  parkingNumber: String!
  isOwner: Boolean!
  isCompany: Boolean!
  sentCalendar: Boolean!
}

type PaginationMeta {
  page: Float!
  skip: Float!
  take: Float!
  itemCount: Float!
  pageCount: Float!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type BuildingsPaginated {
  data: [BuildingEntity!]!
  meta: PaginationMeta!
}

type GuardsPaginated {
  data: [ParkingGuardEntity!]!
  meta: PaginationMeta!
}

type ParkingsPaginated {
  data: [ParkingEntity!]!
  meta: PaginationMeta!
}

type BookingsPaginated {
  data: [BookingEntity!]!
  meta: PaginationMeta!
}

type ParkingBlockedUsersPaginated {
  data: [UserEntity!]!
  meta: PaginationMeta!
}

type ParkingCouponAssignedUsersPaginated {
  data: [UserEntity!]!
  meta: PaginationMeta!
}

type LiquidationsPaginated {
  data: [LiquidationEntity!]!
  meta: PaginationMeta!
}

type CouponsPaginated {
  data: [CouponEntity!]!
  meta: PaginationMeta!
}

type EventsPaginated {
  data: [EventEntity!]!
  meta: PaginationMeta!
}

type RequestsPaginated {
  data: [RequestEntity!]!
  meta: PaginationMeta!
}

type UserLoginResponse {
  user: UserEntity!
  access_token: String!
}

type ClientLoginResponse {
  client: ClientEntity!
  access_token: String!
}

type ParkingGuardLoginResponse {
  guard: ParkingGuardEntity!
  access_token: String!
}

type EmailVerificationCode {
  code: Float!
}

type SmsVerificationCode {
  smsCode: Float!
}

type Card {
  last_4_digits: String!
  identifier: String!
  card_type: String!
  register: String!
}

type RecoverPasswordCodeAndClientId {
  id: String!
  code: Float!
}

type MostProfitableParking {
  parking: ParkingEntity!
  totalPrice: Float!
}

type MostRentedParking {
  parking: ParkingEntity!
  quantity: Float!
}

type TopMostRentedParkings {
  monday: MostRentedParking
  tuesday: MostRentedParking
  wednesday: MostRentedParking
  thursday: MostRentedParking
  friday: MostRentedParking
  saturday: MostRentedParking
  sunday: MostRentedParking
}

type PrepaidHourParking {
  amountToBePaid: Float!
  tax: Float!
  initialPrice: Float!
  discount: Float
}

type BuildingOutput {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  active: Boolean

  """name of the building"""
  name: String!

  """address of the building"""
  address: String!

  """phone number of the building"""
  phoneNumber: String!

  """photos of the building"""
  photo: String
  client: ClientEntity!

  """parkings of the building"""
  parkingList: [ParkingEntity!]!
  tags: [TagsEntity!]!
  location: Geometry!
  floors: String!
  description: String
  guardsAssigned: [ClientEntity!]
  min: String!
  coords: String!
}

type BuildingWithCoordsOutput {
  """id of the entity"""
  id: String!

  """creation date of the entity"""
  createdAt: DateTime!

  """update date of the entity"""
  updatedAt: DateTime!
  active: Boolean

  """name of the building"""
  name: String!

  """address of the building"""
  address: String!

  """phone number of the building"""
  phoneNumber: String!

  """photos of the building"""
  photo: String
  client: ClientEntity!

  """parkings of the building"""
  parkingList: [ParkingEntity!]!
  tags: [TagsEntity!]!
  location: Geometry!
  floors: String!
  description: String
  guardsAssigned: [ClientEntity!]
  coords: String!
}

type MostProfitableBuilding {
  building: BuildingEntity!
  totalPrice: Float!
}

type MonthlyBuildingProfit {
  monthlyBuildingProfit: [MonthlyFinalPrice!]!
}

type MonthlyFinalPrice {
  dailyIncome: Float
  bookingsCount: Float
  day: DateTime!
}

type BookingDailyFinance {
  percentBetterFromYesterday: Float!
  numberOfBookingToday: Float!
}

type BookingDailyIncomeFinance {
  percentBetterFromYesterday: Float!
  numberOfIncomeToday: Float!
}

type PaykuResponse {
  status: String!
  id: String!
  url: String!
}

type BookingPriceCalculated {
  priceToBePaid: Float!
  discount: Float!
  originalPrice: Float!
}

type CurrentPriceBookingOutput {
  amountToBePaid: Float!
  tax: Float!
  initialPrice: Float!
  userWalletDiscount: Float!
  discount: Float
}

type Query {
  findEventById(eventId: String!): EventEntity!
  findEventByCode(code: String!): EventEntity!
  getPaginatedEvents(paginationOptions: PageOptionsDto!): EventsPaginated!
  findAllParkings: [ParkingEntity!]!
  findAllReservableParkingsByBuildingId(buildingId: String!): [ParkingEntity!]!
  findOneParkingById(parkingId: String!): ParkingEntity!
  findOneParkingByBuildingId(buildingId: String!): ParkingEntity!
  findOneParkingByBuildingPositionCode(code: String!, floor: Int!, section: String!, buildingId: String!): ParkingEntity!
  getPaginatedParkings(paginationOptions: PageOptionsDto!, buildingId: String!): ParkingsPaginated!
  findMostProfitableParking: MostProfitableParking
  findWeekMostRentedParkings: TopMostRentedParkings
  calculatePrepaidHourForParking(parkingId: String!, userCouponId: String): PrepaidHourParking!
  findBuildingById(buildingId: String!): BuildingEntity!
  findBuildingWithCoordsById(buildingId: String!): BuildingWithCoordsOutput!
  findBuildingByIdAndFilterParkingsByReservedStatus(buildingId: String!): BuildingEntity!
  findBuildingByAddress(buildingId: String!): BuildingEntity!
  getAllNearbyAndReservableBuildings(distance: Float!, point: PointInput!, parkingType: Float): [BuildingOutput!]!
  getAllNearbyAndBuildings(distance: Float!, point: PointInput!): [BuildingOutput!]!
  getPaginatedBuildings(paginationOptions: PageOptionsDto!): BuildingsPaginated!
  findMostProfitableBuilding: MostProfitableBuilding
  findDailyIncomeOfAllBuildingsInAMonth(days: Float): MonthlyBuildingProfit!
  verifyCustomerPositionIsCloseTo100MtsOrLessFromBuilding(buildingId: String!, point: PointInput!): Boolean!
  getBuildingsAssigedToAGuard(guardId: String!): [BuildingEntity!]!
  findTagById(tagId: String!): [TagsEntity!]!
  findTagsByBuildingId(buildingId: String!): [TagsEntity!]!
  users: [UserEntity!]!
  getPaginatedCouponAssignedUsers(paginationOptions: PageOptionsDto!, couponId: String!): ParkingCouponAssignedUsersPaginated!
  getPaginatedParkingBlockedUsers(paginationOptions: PageOptionsDto!, parkingId: String): ParkingBlockedUsersPaginated!
  searchUsersByGivenRutEmailOrFullname(text: String!, restrictedIds: [String!]!): [UserEntity!]!
  userById(userId: String!): UserEntity!
  userByRut(rut: String!): UserEntity
  getUserEmailCode(fullname: String!, email: String!): EmailVerificationCode!
  getUserSMSCode(phoneNumber: String!): SmsVerificationCode!
  getPaykuClientCardData: [Card!]!
  addCardToClient: String!
  checkUserAndGetCodeToValidate(rut: String!): RecoverPasswordCodeAndClientId!
  clientById(clientId: String!): ClientEntity!
  clients: [ClientEntity!]!
  clientByRut(rut: String!): ClientEntity
  searchClientByRutEmailOrPhone(rut: String!, email: String!, phone: String!): ClientEntity
  getClientEmailCode(fullname: String!, email: String!): EmailVerificationCode!
  getClientSMSCode(phoneNumber: String!): SmsVerificationCode!
  checkClientAndGetCodeToValidate(rut: String!): RecoverPasswordCodeAndClientId!
  findVehicleById(vehicleId: String!): VehicleEntity!
  findVehiclesByUserId: [VehicleEntity!]!
  findVehiclesWithModelPlateOrOwner(text: String!): [VehicleEntity!]!
  getAllHoldings: [HoldingEntity!]!
  getHoldingById(holdingId: String!): HoldingEntity!
  getBookingCountForOrderNumberAndCreatePaykuOrder(paykuModel: PaykuModel!): PaykuResponse!
  getPaginatedBookings(paginationOptions: PageOptionsDto!, parkingId: String, displayAll: Boolean): BookingsPaginated!
  findBookingsMadeTodayAndYesterday: BookingDailyFinance!
  findBookingsAndGetDailyIncomeAndPercentage: BookingDailyIncomeFinance!
  findBookingById(bookingId: String!, relations: String): BookingEntity!
  updateBookingParking(bookingId: String!, parkingId: String!): BookingEntity!
  updateBookingUser(bookingId: String!, userId: String!): BookingEntity!
  getActiveBookingByUserId: [BookingEntity!]!
  getUnPaidBookings: [BookingEntity!]!
  getBookingWithPaymentRequiredToStart: BookingEntity!
  getBookingPriceCalculated(bookingId: String!): BookingPriceCalculated!
  resetCronJobsForBookingId(bookingId: String!): BookingEntity!
  findRecentBookingsFromBuildings: [BookingEntity!]!
  getBookingCurrentPriceToPay(bookingId: String!, userCouponId: String): CurrentPriceBookingOutput!
  GetBookingsFromTheCurrentDayOfBuilding(buildingId: String!): [BookingEntity!]!
  getPaginatedRequests(paginationOptions: PageOptionsDto!): RequestsPaginated!
  forceToLiquidateToAllBookings: [LiquidationEntity!]!
  getAllLiquidations(paginationOptions: PageOptionsDto!): LiquidationsPaginated!
  updateLiquidation(updateLiquidationInput: UpdateLiquidationInput!): LiquidationEntity!
  getPaginatedCoupons(paginationOptions: PageOptionsDto!): CouponsPaginated!
  getUserCoupons: [UserCouponEntity!]!
  getPaginatedBuildingGuards(paginationOptions: PageOptionsDto!, buildingId: String!): GuardsPaginated!
  searchGuardsByGivenRutPhoneNumberOrFullname(text: String!, restrictedIds: [String!]!): [ParkingGuardEntity!]!
}

input PageOptionsDto {
  page: Float! = 1
  take: Float! = 10
  skip: Float! = 0
}

input PointInput {
  type: String!
  coordinates: [Float!]!
}

input PaykuModel {
  email: String!
  order: Float
  subject: String!
  amount: Float!
  currency: String!
  payment: Float!
  expired: String!
  urlreturn: String!
  urlnotify: String!
}

input UpdateLiquidationInput {
  priceToBeLiquidated: Float
  liquidatedBy: String
  liquidationType: Int
  paid: Boolean
  liquidationReceipt: String
  approved: Boolean
  approvedBy: String
  liquidatedPdf: String
  id: String!
}

type Mutation {
  uploadFile(createFileInput: CreateFileInput!, file: Upload!): String!
  deleteFile(url: String!): Boolean!
  createEvent(createEventInput: CreateEventInput!): EventEntity!
  updateEvent(updateEventInput: UpdateEventInput!): EventEntity!
  removeEvent(eventId: String!): EventEntity!
  setEventPhoto(eventId: String!, createPhotoInput: CreatePhotoInput!, file: Upload!): EventEntity!
  updateParking(updateParkingInput: UpdateParkingInput!, buildingId: String): ParkingEntity!
  removeBlockedUserFromParking(userId: String!, parkingId: String!): ParkingEntity!
  addUserToParkingBlockList(userId: String!, parkingId: String!): ParkingEntity!
  removeParking(parkingId: String!): ParkingEntity!
  createParking(createParkingInput: CreateParkingInput!, buildingId: String!, clientId: String!): ParkingEntity!
  setParkingPhoto(parkingId: String!, createPhotoInput: CreatePhotoInput!, file: Upload): ParkingEntity!
  createSchedule(createScheduleInput: CreateScheduleInput!, parkingId: String!): ScheduleEntity!
  removeSchedule(scheduleId: String!): ScheduleEntity!
  updateSchedule(updateScheduleInput: UpdateScheduleInput!): ScheduleEntity!
  createBuilding(createBuildingEntity: CreateBuildingInput!, ownerId: String!, tags: [String!]!): BuildingEntity!
  updateBuilding(updateBuildingInput: UpdateBuildingInput!, tags: [String!]): BuildingEntity!
  removeTag(tagId: String!): TagsEntity!
  setBuildingPhoto(buildingId: String!, createPhotoInput: CreatePhotoInput!, file: Upload!): BuildingEntity!
  createTag(createTagInput: CreateTagInput!): TagsEntity!
  updateTag(updateTagInput: UpdateTagInput!): TagsEntity!
  createUser(createUserInput: CreateUserInput!): UserEntity!
  createClient(createClientInput: CreateClientInput!): ClientEntity!
  createGuard(createParkingGuardInput: CreateParkingGuardInput!): ParkingGuardEntity!
  guardLogin(loginGuardInput: LoginGuardInput!): ParkingGuardLoginResponse!
  clientLogin(loginClientInput: LoginClientInput!): ClientLoginResponse!
  login(loginUserInput: LoginUserInput!): UserLoginResponse!
  refreshToken(accessToken: String!): UserLoginResponse!
  refreshClientToken(accessToken: String!): ClientLoginResponse!
  refreshGuardToken(accessToken: String!): ParkingGuardLoginResponse!
  updateUserPassword(updateUserInput: UpdateUserInput!): UserEntity!
  updateUser(updateUserInput: UpdateUserInput!): UserEntity!
  setProfilePhoto(userId: String!, photoInput: CreatePhotoInput!, photo: Upload!): UserEntity!
  removeUser(userId: String!): UserEntity!
  updateClient(updateClientInput: UpdateClientInput!): ClientEntity!
  setClientProfilePhoto(clientId: String!, photoInput: CreatePhotoInput!, photo: Upload!): ClientEntity!
  removeClient(clientId: String!): ClientEntity!
  createVehicle(createVehicleInput: CreateVehicleInput!, ownerId: String!): VehicleEntity!
  updateVehicle(updateVehicleInput: UpdateVehicleInput!): VehicleEntity!
  removeVehicle(vehicleId: String!): VehicleEntity!
  updateHolding(updateHoldingInput: UpdateHoldingInput!, newClientsId: String): HoldingEntity!
  setHoldingPhoto(holdingId: String!, photoInput: CreatePhotoInput!, photo: Upload!): HoldingEntity!
  removeHolding(holdingId: String!): UserEntity!
  createHolding(createHoldingInput: CreateHoldingInput!, clientsIds: String!): UserEntity!
  createBooking(createBookingInput: CreateBookingInput!, parkingId: String!, vehicleId: String, selectedDate: String): BookingEntity!
  updateBooking(updateBookingInput: UpdateBookingInput!): BookingEntity!
  removeBooking(bookingId: String!): BookingEntity!
  generatePaymentFromPayku(bookingId: String!, paygate: String!, subId: String!, priceToPay: Float!, couponId: String, anticipatedBooking: Boolean, bookingNextState: Float): BookingEntity!
  createRequest(createRequestInput: CreateRequestInput!): RequestEntity!
  updateRequest(updateRequestInput: UpdateRequestInput!): RequestEntity!
  uploadPaymentReceipt(liquidationId: String!, receiptPdf: Upload!): LiquidationEntity!
  generateBulkOfCodes(generateCouponsOptions: GenerateCouponOptions!): [CouponEntity!]!
  assignCouponToUser(userId: String!, couponId: String!): CouponEntity!
  updateCoupon(updateCouponInput: UpdateCouponInput!): CouponEntity!
  deleteCoupon(id: String!): CouponEntity!
  removeAssignedUserFromCoupon(userCouponId: String!): UserCouponEntity!
  updateUserCoupon(updateUserCouponInput: UpdateUserCouponInput!): UserCouponEntity!
  verifyIfCouponExistsAndThenAssignToUser(couponText: String!): UserCouponEntity
  assignGuardToBuilding(buildingId: String!, guardId: String!): ParkingGuardEntity!
  unassignGuardToBuilding(buildingId: String!, guardId: String!): ParkingGuardEntity!
}

input CreateFileInput {
  userId: String!
  ratio: RatioEnum
}

enum RatioEnum {
  SQUARE
  MODERN
  MODERN_PORTRAIT
  OLD
  OLD_PORTRAIT
  BANNER
  ULTRA_WIDE
  SUPER_WIDE
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateEventInput {
  bannerImage: String
  descriptionOfBanner: String!
  name: String!
  organizerName: String!
  startAt: DateTime!
  endAt: DateTime!
  percentageParkingDiscount: Float!
  percentageOrganizedProfit: Float!
}

input UpdateEventInput {
  bannerImage: String
  descriptionOfBanner: String
  name: String
  organizerName: String
  startAt: DateTime
  endAt: DateTime
  percentageParkingDiscount: Float
  percentageOrganizedProfit: Float
  id: String!
  active: Boolean
  code: String
}

input CreatePhotoInput {
  url: String
  name: String!
  creatorId: String!
}

input UpdateParkingInput {
  name: String
  address: String
  reserved: Boolean
  active: Boolean
  blocked: Boolean
  tax: String
  floor: Int
  section: String
  code: String
  photo: String
  pricePerMinute: String
  priceMonthly: String
  priceYearly: String
  type: Int
  description: String
  phone: String
  contactEmail: String
  canBookAnticipated: Boolean
  percentageSurchargeForReservation: Float
  id: String!
}

input CreateParkingInput {
  name: String!
  address: String!
  reserved: Boolean!
  active: Boolean!
  blocked: Boolean!
  tax: String!
  floor: Int!
  section: String!
  code: String!
  photo: String
  pricePerMinute: String!
  priceMonthly: String!
  priceYearly: String!
  type: Int!
  description: String
  phone: String!
  contactEmail: String!
  canBookAnticipated: Boolean!
  percentageSurchargeForReservation: Float!
}

input CreateScheduleInput {
  """day of the schedule"""
  day: Int!
  scheduleStart: DateTime!
  scheduleEnd: DateTime!
}

input UpdateScheduleInput {
  """day of the schedule"""
  day: Int
  scheduleStart: DateTime
  scheduleEnd: DateTime
  id: String!
}

input CreateBuildingInput {
  """address of the building"""
  address: String!

  """phone number of the building"""
  phoneNumber: String!

  """photo of the building"""
  photo: String

  """name of the building"""
  name: String!
  location: PointInput!
  floors: String!
  description: String
}

input UpdateBuildingInput {
  """address of the building"""
  address: String

  """phone number of the building"""
  phoneNumber: String

  """photo of the building"""
  photo: String

  """name of the building"""
  name: String
  location: PointInput
  floors: String
  description: String

  """id of the building"""
  id: String!
  active: Boolean
}

input CreateTagInput {
  name: String!
  color: String!
  icon: String!
}

input UpdateTagInput {
  name: String
  color: String
  icon: String
  id: String!
}

input CreateUserInput {
  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """photo of the user"""
  profilePhoto: String

  """hashed password of the user"""
  password: String!
  validatedAccount: Boolean!

  """validated email"""
  validatedEmail: Boolean!

  """validated phone"""
  validatedPhone: Boolean!

  """type of the user"""
  userType: Int!
  wallet: Int
  licenseDriver: String
  dniPhoto: String
  supplier: Boolean
}

input CreateClientInput {
  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """photo of the user"""
  profilePhoto: String

  """hashed password of the user"""
  password: String!
  validatedAccount: Boolean!

  """validated email"""
  validatedEmail: Boolean!

  """validated phone"""
  validatedPhone: Boolean!

  """type of the user"""
  userType: Int!
  preferedLiquidationPayRate: Int!
  bankType: Int
  bankAccountEmail: String
  bankAccountName: String
  bankAccountType: Int
  bankAccountNumber: String
  supplier: String
}

input CreateParkingGuardInput {
  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """photo of the user"""
  profilePhoto: String

  """hashed password of the user"""
  password: String!
  validatedAccount: Boolean!

  """validated email"""
  validatedEmail: Boolean!

  """validated phone"""
  validatedPhone: Boolean!

  """type of the user"""
  userType: Int!
}

input LoginGuardInput {
  """rut of the user"""
  username: String!

  """pw of the user"""
  password: String!
}

input LoginClientInput {
  """rut of the user"""
  username: String!

  """pw of the user"""
  password: String!
}

input LoginUserInput {
  """rut of the user"""
  username: String!

  """pw of the user"""
  password: String!
}

input UpdateUserInput {
  """rut of the user"""
  rut: String

  """name of the holding"""
  fullname: String

  """email of the user"""
  email: String

  """phone number of the user"""
  phoneNumber: String

  """photo of the user"""
  profilePhoto: String

  """hashed password of the user"""
  password: String
  validatedAccount: Boolean

  """validated email"""
  validatedEmail: Boolean

  """validated phone"""
  validatedPhone: Boolean

  """type of the user"""
  userType: Int
  wallet: Int
  licenseDriver: String
  dniPhoto: String
  supplier: Boolean
  id: String!
}

input UpdateClientInput {
  """rut of the user"""
  rut: String

  """name of the holding"""
  fullname: String

  """email of the user"""
  email: String

  """phone number of the user"""
  phoneNumber: String

  """photo of the user"""
  profilePhoto: String

  """hashed password of the user"""
  password: String
  validatedAccount: Boolean

  """validated email"""
  validatedEmail: Boolean

  """validated phone"""
  validatedPhone: Boolean

  """type of the user"""
  userType: Int
  preferedLiquidationPayRate: Int
  bankType: Int
  bankAccountEmail: String
  bankAccountName: String
  bankAccountType: Int
  bankAccountNumber: String
  supplier: String
  id: String!
}

input CreateVehicleInput {
  model: String!

  """patente"""
  carPlate: String!

  """color"""
  color: String!

  """car type"""
  carType: Int!
}

input UpdateVehicleInput {
  model: String

  """patente"""
  carPlate: String

  """color"""
  color: String

  """car type"""
  carType: Int
  id: String!
}

input UpdateHoldingInput {
  """rut of the user"""
  rut: String

  """name of the holding"""
  fullname: String

  """email of the user"""
  email: String

  """phone number of the user"""
  phoneNumber: String

  """photo of the user"""
  profilePhoto: String
  id: String!
}

input CreateHoldingInput {
  """rut of the user"""
  rut: String!

  """name of the holding"""
  fullname: String!

  """email of the user"""
  email: String!

  """phone number of the user"""
  phoneNumber: String!

  """photo of the user"""
  profilePhoto: String
}

input CreateBookingInput {
  bookingType: Int!
  bookingState: Int!
  initialPrice: Float!
  dateStart: String!
  dateEnd: String
  paid: Boolean!
  anticipatedBooking: Boolean
}

input UpdateBookingInput {
  bookingType: Int
  bookingState: Int
  initialPrice: Float
  dateStart: String
  dateEnd: String
  paid: Boolean
  anticipatedBooking: Boolean
  id: String!
  dateExtended: DateTime
  timeFinalized: DateTime
  finalPrice: Float
  mountPaid: Float
}

input CreateRequestInput {
  fullName: String!
  type: Float!
  status: Float!
  phoneNumber: String!
  email: String!
  state: String!
  city: String!
  parkingType: Float
  address: String
  location: Geometry
  quantity: Float
  scheduleStart: DateTime
  scheduleEnd: DateTime
  floor: String
  parkingNumber: String
  isOwner: Boolean
  isCompany: Boolean
  sentCalendar: Boolean
  requestState: Boolean
}

input UpdateRequestInput {
  fullName: String
  type: Float
  status: Float
  phoneNumber: String
  email: String
  state: String
  city: String
  parkingType: Float
  address: String
  location: Geometry
  quantity: Float
  scheduleStart: DateTime
  scheduleEnd: DateTime
  floor: String
  parkingNumber: String
  isOwner: Boolean
  isCompany: Boolean
  sentCalendar: Boolean
  requestState: Boolean
  id: String!
}

input GenerateCouponOptions {
  prefix: String!
  postfix: String!
  length: Int!
  characters: String!
  quantity: Int!
  couponInput: CreateCouponInput!
}

input CreateCouponInput {
  code: String
  createdBy: String!
  type: Int!
  behavior: Int!
  active: Boolean!
  dateStart: DateTime
  dateEnd: DateTime
  useTimes: Int
  global: Boolean!
  value: Int!
}

input UpdateCouponInput {
  code: String
  createdBy: String
  type: Int
  behavior: Int
  active: Boolean
  dateStart: DateTime
  dateEnd: DateTime
  useTimes: Int
  global: Boolean
  value: Int
  id: String!
}

input UpdateUserCouponInput {
  quantityRemaining: Int
  valid: Boolean
  id: String!
}